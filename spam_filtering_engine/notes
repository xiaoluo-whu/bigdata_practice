import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.classification.LogisticRegressionWithSGD
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.regression.LabeledPoint


val spam_mails = sc.textFile("file:///home/kiran/Documents/datasets/spam_filtering/spam")
val ham_mails = sc.textFile("file:///home/kiran/Documents/datasets/spam_filtering/ham")

val features = new HashingTF(numFeatures = 1000)

val Features_spam = spam_mails.map(mail => features.transform(mail.split(" ")))
val Features_ham = ham_mails.map(mail => features.transform(mail.split(" ")))

val Features_spam = spam_mails.map(mail => features.transform(mail.split(" ")))
val Features_ham = ham_mails.map(mail => features.transform(mail.split(" ")))

val data = positive_data.union(negative_data)
data.cache()
val Array(training, test) = data.randomSplit(Array(0.6, 0.4))

val logistic_Learner = new LogisticRegressionWithSGD()

val model = logistic_Learner.run(training)
val predictionLabel = test.map(x=> (model.predict(x.features),x.label))
val accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / training.count()


